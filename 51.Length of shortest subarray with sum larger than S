/*

Given an array, find the length of the shortest subarray, the sum of which is greater than or equal to S.

*/

/*

solution1: iterate the end and begin position
O(n^2) time, O(1) space
*/

int findShortest1(vector<int>& num, int s)
{
	int sum=0;
	int start=0,end=0;
	int res=num.size()+1;
	while(end<num.size())
	{
		if(sum<s)
			sum+=num[end];
		while(sum>=s)
		{
			res=min(res,end-start+1);
			sum-=num[start++];
		}
		end++;
	}
	return res;
}

/*

solution2: use queue to store the subarray
O(n^2) worst time, O(n) space
*/

int findShortest2(vector<int>& num,int s)
{
	int n=num.size();
	queue<int> q;
	int res=n+1,Sum=0;
	for(int i=0;i<n;++i)
	{
		if(q.empty()||Sum<s)
		{
			q.push(num[i]);
			Sum+=num[i];
		}
		
		while(!q.empty()&&Sum>=s)
		{
			res=min(res,(int)q.size());
			Sum-=q.front();
			q.pop();
		}
	}
	return res;
}


